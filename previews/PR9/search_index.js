var documenterSearchIndex = {"docs":
[{"location":"examples/#Examples-1","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/#","page":"Examples","title":"Examples","text":"using EcologicalNetworks\nusing EcologicalNetworksPlots\nusing Plots","category":"page"},{"location":"examples/#Static-layouts-1","page":"Examples","title":"Static layouts","text":"","category":"section"},{"location":"examples/#Nested-1","page":"Examples","title":"Nested","text":"","category":"section"},{"location":"examples/#","page":"Examples","title":"Examples","text":"Unes = web_of_life(\"M_SD_033\")\nI = initial(BipartiteInitialLayout, Unes)\nposition!(NestedBipartiteLayout(0.4), I, Unes)\nplot(I, Unes, aspectratio=1)\nscatter!(I, Unes, bipartite=true)","category":"page"},{"location":"examples/#Circular-1","page":"Examples","title":"Circular","text":"","category":"section"},{"location":"examples/#","page":"Examples","title":"Examples","text":"Unes = web_of_life(\"M_SD_033\")\nI = initial(CircularInitialLayout, Unes)\nposition!(CircularLayout(), I, Unes)\nplot(I, Unes, aspectratio=1)\nscatter!(I, Unes, bipartite=true)","category":"page"},{"location":"examples/#Dynamic-layouts-1","page":"Examples","title":"Dynamic layouts","text":"","category":"section"},{"location":"examples/#Force-directed-1","page":"Examples","title":"Force directed","text":"","category":"section"},{"location":"examples/#","page":"Examples","title":"Examples","text":"Umod = web_of_life(\"M_PA_003\")\nI = initial(RandomInitialLayout, Umod)\nfor step in 1:4000\n  position!(ForceDirectedLayout(2.5), I, Umod)\nend\nplot(I, Umod, aspectratio=1)\nscatter!(I, Umod, bipartite=true)","category":"page"},{"location":"examples/#Food-web-layout-1","page":"Examples","title":"Food web layout","text":"","category":"section"},{"location":"examples/#","page":"Examples","title":"Examples","text":"Fweb = simplify(nz_stream_foodweb()[5])\nI = initial(FoodwebInitialLayout, Fweb)\nfor step in 1:4000\n  position!(ForceDirectedLayout(true, false, 2.5), I, Fweb)\nend\nplot(I, Fweb)\nscatter!(I, Fweb)","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"Note that we can replace some properties of the nodes in the layout after the positioning algorithm occurred – so we can, for example, use the actual (instead of fractional) trophic level:","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"Fweb = simplify(nz_stream_foodweb()[5])\nI = initial(FoodwebInitialLayout, Fweb)\nfor step in 1:4000\n  position!(ForceDirectedLayout(true, false, 2.5), I, Fweb)\nend\ntl = trophic_level(Fweb)\nfor s in species(Fweb)\n  I[s].y = tl[s]\nend\nplot(I, Fweb)\nscatter!(I, Fweb)","category":"page"},{"location":"examples/#Node-properties-1","page":"Examples","title":"Node properties","text":"","category":"section"},{"location":"examples/#Color-1","page":"Examples","title":"Color","text":"","category":"section"},{"location":"examples/#","page":"Examples","title":"Examples","text":"Unes = web_of_life(\"M_SD_033\")\nI = initial(BipartiteInitialLayout, Unes)\nposition!(NestedBipartiteLayout(0.4), I, Unes)\nplot(I, Unes, aspectratio=1)\nscatter!(I, Unes, bipartite=true, nodefill=degree(Unes))","category":"page"},{"location":"examples/#Size-1","page":"Examples","title":"Size","text":"","category":"section"},{"location":"examples/#Advanced-examples-1","page":"Examples","title":"Advanced examples","text":"","category":"section"},{"location":"examples/#","page":"Examples","title":"Examples","text":"One important feature of the package is that the layout can contain more nodes than the network. For example, we can use this to our advantage, to represent species with a degree larger than 3 in red:","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"Umod = web_of_life(\"M_PA_003\")\nI = initial(RandomInitialLayout, Umod)\nfor step in 1:4000\n  position!(ForceDirectedLayout(2.5), I, Umod)\nend\nplot(I, Umod, aspectratio=1)\nscatter!(I, Umod)\nN = convert(AbstractUnipartiteNetwork, convert(BinaryNetwork, Umod))\ncore3 = collect(keys(filter(p -> p.second == 3, degree(N))))\nplot!(I, N[core3], lc=:red)\nscatter!(I, N[core3], mc=:red)","category":"page"},{"location":"examples/#Heatmaps-1","page":"Examples","title":"Heatmaps","text":"","category":"section"},{"location":"examples/#","page":"Examples","title":"Examples","text":"Umod = web_of_life(\"M_PA_003\")\nheatmap(Umod)","category":"page"},{"location":"#","page":"Index","title":"Index","text":"Plotting functions are part of the EcologicalNetworksPlot, which requires Plots to work. EcologicalNetworksPlot can be installed from the central Julia package repository.","category":"page"},{"location":"#Initial-layouts-1","page":"Index","title":"Initial layouts","text":"","category":"section"},{"location":"#","page":"Index","title":"Index","text":"initial","category":"page"},{"location":"#EcologicalNetworksPlots.initial","page":"Index","title":"EcologicalNetworksPlots.initial","text":"initial(::Type{RandomInitialLayout}, N::T) where {T <: EcologicalNetworks.AbstractEcologicalNetwork}\n\nRandom disposition of nodes in the unit square. This is a good starting point for any force-directed layout.\n\n\n\n\n\ninitial(::Type{BipartiteInitialLayout}, N::T) where {T <: EcologicalNetworks.AbstractBipartiteNetwork}\n\nRandom disposition of nodes on two levels for bipartite networks.\n\n\n\n\n\ninitial(::Type{FoodwebInitialLayout}, N::T) where {T <: EcologicalNetworks.AbstractUnipartiteNetwork}\n\nRandom disposition of nodes on trophic levels for food webs. Note that the fractional trophic level is used, but the layout can be modified afterwards to use the continuous levels.\n\n\n\n\n\ninitial(::Type{CircularInitialLayout}, N::T) where {T <: EcologicalNetworks.AbstractEcologicalNetwork}\n\nRandom disposition of nodes on a circle. This is the starting point for circle-based layouts.\n\n\n\n\n\ninitial(::Type{UnravelledInitialLayout}, N::T) where {T <: EcologicalNetworks.AbstractUnipartiteNetwork}\n\nUnravelled disposition of nodes on trophic levels for food webs, where the x axis is the omnivory index. Note that the fractional trophic level is used, but the layout can be modified afterwards to use the continuous levels. See the documentation for UnravelledLayout to see how.\n\n\n\n\n\n","category":"function"},{"location":"#","page":"Index","title":"Index","text":"RandomInitialLayout\nBipartiteInitialLayout\nFoodwebInitialLayout\nCircularInitialLayout\nUnravelledInitialLayout","category":"page"},{"location":"#EcologicalNetworksPlots.RandomInitialLayout","page":"Index","title":"EcologicalNetworksPlots.RandomInitialLayout","text":"RandomInitialLayout\n\nThis type is used to generate an initial layout, where the nodes are placed at random.\n\n\n\n\n\n","category":"type"},{"location":"#EcologicalNetworksPlots.BipartiteInitialLayout","page":"Index","title":"EcologicalNetworksPlots.BipartiteInitialLayout","text":"BipartiteInitialLayout\n\nThis type is used to generate an initial bipartite layout, where the nodes are placed on two levels, but their horizontal position is random.\n\n\n\n\n\n","category":"type"},{"location":"#EcologicalNetworksPlots.FoodwebInitialLayout","page":"Index","title":"EcologicalNetworksPlots.FoodwebInitialLayout","text":"FoodwebInitialLayout\n\nThis type is used to generate an initial layout, where the nodes are placed on their trophic levels, but their horizontal position is random.\n\n\n\n\n\n","category":"type"},{"location":"#EcologicalNetworksPlots.CircularInitialLayout","page":"Index","title":"EcologicalNetworksPlots.CircularInitialLayout","text":"CircularInitialLayout\n\nThis type is used to generate an initial layout, where the nodes are placed at random along a circle.\n\n\n\n\n\n","category":"type"},{"location":"#EcologicalNetworksPlots.UnravelledInitialLayout","page":"Index","title":"EcologicalNetworksPlots.UnravelledInitialLayout","text":"UnravelledInitialLayout\n\nThis type is used to generate an initial unravelled layout, where the nodes are sorted vertically by trophic level, and horizontally by omnivory index. Credit for this approach goes to @gvdr – https://github.com/gvdr/unravel#unravel\n\n\n\n\n\n","category":"type"},{"location":"#Layouts-1","page":"Index","title":"Layouts","text":"","category":"section"},{"location":"#Force-directed-layout-1","page":"Index","title":"Force-directed layout","text":"","category":"section"},{"location":"#","page":"Index","title":"Index","text":"ForceDirectedLayout","category":"page"},{"location":"#EcologicalNetworksPlots.ForceDirectedLayout","page":"Index","title":"EcologicalNetworksPlots.ForceDirectedLayout","text":"ForceDirectedLayout\n\n\n\n\n\n","category":"type"},{"location":"#Static-layouts-1","page":"Index","title":"Static layouts","text":"","category":"section"},{"location":"#","page":"Index","title":"Index","text":"CircularLayout\nNestedBipartiteLayout\nUnravelledLayout","category":"page"},{"location":"#EcologicalNetworksPlots.CircularLayout","page":"Index","title":"EcologicalNetworksPlots.CircularLayout","text":"CircularLayout\n\nA circular layout has a single field, radius.\n\n\n\n\n\n","category":"type"},{"location":"#EcologicalNetworksPlots.NestedBipartiteLayout","page":"Index","title":"EcologicalNetworksPlots.NestedBipartiteLayout","text":"NestedBipartiteLayout\n\nParameters are\n\nalign (whether the two levels should be centered together)\nrelative (whether the two levels should occupy a length equal to their relative richness)\nspread (the distance between the two)\n\nNote that to see the effect of spread, you may have to use aspectratio=1; if not, the spacing between levels will be determined by the dimensions of the plot.\n\n\n\n\n\n","category":"type"},{"location":"#EcologicalNetworksPlots.UnravelledLayout","page":"Index","title":"EcologicalNetworksPlots.UnravelledLayout","text":"UnravelledLayout\n\nParameters are\n\nx (a function to get the value on x)\ny (a function to get the value on y)\n\nBoth of these functions must accept a unipartite network as input, and return a dictionary with species and a single numerical value as output. Note that x and/or y can be λs.\n\n\n\n\n\n","category":"type"},{"location":"#Apply-layout-to-network-1","page":"Index","title":"Apply layout to network","text":"","category":"section"},{"location":"#","page":"Index","title":"Index","text":"position!","category":"page"},{"location":"#EcologicalNetworksPlots.position!","page":"Index","title":"EcologicalNetworksPlots.position!","text":"position!(LA::ForceDirectedLayout, L::Dict{K,NodePosition}, N::T) where {T <: EcologicalNetworks.AbstractEcologicalNetwork} where {K}\n\nOne iteration of the force-directed layout routine. Because these algorithms can take some time to converge, it may be useful to stop every 500 iterations to have a look at the results.\n\n\n\n\n\nposition!(LA::CircularLayout, L::Dict{K,NodePosition}, N::T) where {T <: AbstractEcologicalNetwork} where {K}\n\nNodes will be positioned at equal distances along a circle, and nodes that are densely connected will be closer to one another. This is an efficient way to represent modular networks.\n\nReferences\n\nMcGuffin, M.J., 2012. Simple algorithms for network visualization: A tutorial. Tsinghua Science and Technology 17, 383–398. https://doi.org/10.1109/TST.2012.6297585\n\n\n\n\n\n","category":"function"}]
}
